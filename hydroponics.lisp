(defvar +teaspoon+ "teaspoon")
(defvar +half-teaspoon+ "1/2 teaspoon")
(defvar +quarter-teaspoon+ "1/4th teaspoon")
(defvar +eighth-teaspoon+ "1/8th teaspoon")

(defun nearest-tsp-amt (limit)
  (cond ((< limit 0.125) 0.00)
        ((and (>= limit 0.125) (< limit 0.250)) 0.125)
        ((and (>= limit 0.250) (< limit 0.500)) 0.250)
        ((and (>= limit 0.500) (< limit 1.000)) 0.500)
        ((and (>= limit 1.000)) 1.000)))

(defun format-tsp-hash (hash)
  (let ((str ""))
    (flet ((plus ()
             (when (uiop:string-suffix-p str "teaspoons")
               (setq str (concat str " plus ")))))
      (alexandria:when-let (n (gethash +teaspoon+ hash))
        (setq str (concat str (format nil "~D teaspoons" n))))
      (alexandria:when-let (n (gethash +half-teaspoon+ hash))
        (plus)
        (setq str (concat str (format nil "<~D> 1/2 teaspoons" n))))
      (alexandria:when-let (n (gethash +quarter-teaspoon+ hash))
        (plus)
        (setq str (concat str (format nil "<~D> 1/4th teaspoons" n))))
      (alexandria:when-let (n (gethash +eighth-teaspoon+ hash))
        (plus)
        (setq str (concat str (format nil "<~D> 1/8th teaspoons" n))))
      (if (equal str "")
          "0 teaspoons"
          str))))

(defun tsp-approx (limit &optional (amt 0.0) (add (nearest-tsp-amt limit)) (tsp-hash (make-hash-table :test 'equal)))
  (if (<= (+ amt add) limit)
      (let ((tsp-type (cond ((= 0.125 add) +eighth-teaspoon+)
                            ((= 0.250 add) +quarter-teaspoon+)
                            ((= 0.500 add) +half-teaspoon+)
                            ((= 1.000 add) +teaspoon+)
                            (t nil))))
        ;; (format t "~A" tsp-type)
        (if tsp-type
            (progn
              (if (gethash tsp-type tsp-hash)
                  (incf (gethash tsp-type tsp-hash))
                  (setf (gethash tsp-type tsp-hash) 1))
              ;; (format t "~A, ~A, ~A" amt (+ amt add) (nearest-tsp-amt (- limit add)))
              (tsp-approx limit (+ amt add) (nearest-tsp-amt (- limit add)) tsp-hash))
            (format-tsp-hash tsp-hash)))
      (if (>= add 0.250)
          (tsp-approx limit amt (/ add 2) tsp-hash)
          (format-tsp-hash tsp-hash))))

(defun floragro-needed (mL-per-100L cups)
  (declare (type integer mL-per-100L cups))
  (let* ((mL-per-L (/ mL-per-100L 100))
         (mL-per-cup (/ mL-per-L 4.22675))
         (mL (* mL-per-cup cups))
         (µL (* mL 1000))
         (tsp (/ mL 4.929)))
    (format nil "~D mL, ~D µL, ~D tsp (approx ~A)" mL µL tsp (tsp-approx tsp))))

;; Aggressive basil growth (5 gals)
(defun aggressive-basil-growth (&optional (cups 80))
  (list "Floramicro" (floragro-needed 264 cups)
        "Floragro" (floragro-needed 396 cups)
        "Florabloom" (floragro-needed 132 cups)))

;; Tomato blooming/ripening (5 gals)
(defun blooming-tomato (&optional (cups 80))
  (list "Floramicro" (floragro-needed 264 cups)
        "Floragro" (floragro-needed 132 cups)
        "Florabloom" (floragro-needed 396 cups)))

(load "tests.lisp")
(test-tsp-approx)
